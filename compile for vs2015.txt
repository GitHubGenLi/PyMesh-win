1. 解压缩 PyMesh
   或者用git从https://github.com/qnzhou/PyMesh.git下载
   CMake加载CMakeList.txt
   
2. 下载anaconda，https://www.continuum.io/downloads
   注意，一定是 Python 2.7的版本，pymesh对3.x支持有问题
   安装完成后，Python、NumPy、SciPy都会自动安装好。
	
3. 下载并解压缩eigen-eigen-b30b87236a1b.tar
   CMake中设置Eigen_include_DIR
   
4. 下载并解压缩swigwin，http://www.swig.org/download.html
   CMake中设置SWIG_EXECUTABLE，即swig.exe的路径
   
5. 下载并安装boost_1_60_0
   CMake中设置 Boost_INCLUDE_DIR 为boost的安装路径，
   缺省为C:\local\boost_1_60_0
   
5. 安装CGAL-4.7
   注意安装过程中
		选中“GMP and MPFR precompiled libs”
		选择正确的32-bit或者64-bit
		要求将CGAL_DIR设定为环境变量  
   用CMake为CGAL生成工程到/build路径，该路径设置到pymesh的CMake参数CGAL_DIR中，因为要用到其中的CGALConfig.cmake文件
   

正常的话，这时已经生成可以正常的generate了



   
7. CMake中设置GMP_INCLUDE_DIRS 为 CGAL-4.7\auxiliary\gmp\include
   CMake中设置GMP_LIBRARIES为 CGAL-4.7\auxiliary\gmp\lib\libgmp-10.lib
   
   CMake中设置LIBIGL_INCLUDE_DIRS
   
8. 下载tetgen1.5.0
   生成工程并编译
   在CMake中添加关于TETGEN的路径
   
9。将qhull解压，
   用vs11打开Build目录下vc8的solution
   对出现“Error	4	error LNK1112: module machine type 'x64' conflicts with target machine type 'X86'	”
   错误的工程，在工程设置Linker->All Options->Additional Options里，将X86改为x64
   只要能编译libqhull工程即可
	生成的libqhull.lib在lib目录下
	qh_QHpointer
	
10.解压sparsehash-master
   将SPARSEHASH_INCLUDE_DIRS设置为sparsehash的路径
   在生成的工程中，增加include路径到sparsehash-master\src\windows
 	
11.cork
   新建lib工程，把src目录下除了

PyMesh的编译过程
1. 下载并安装CTP NOV
2. 将工程设置General->Platform Toolset改为用Nov 2012 CTP
8. STLParser.cpp Ln241，将LINE_SIZE定义为const
4. HashMapTrait.h Ln99，用0x7fffffff替代max函数
9. HashGridImplementation.inl Ln302
   改为 typename HashGridImplementation<Trait>::HashKey

  
   
遗留问题
1. HashMapTrait.h Ln99， static const的定义
2. 